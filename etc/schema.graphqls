# Mageplaza
#
# NOTICE OF LICENSE
#
# This source file is subject to the Mageplaza.com license that is
# available through the world-wide-web at this URL:
# https://www.mageplaza.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Mageplaza
# @package     Mageplaza_GiftCardGraphQl
# @copyright   Copyright (c) Mageplaza (https://www.mageplaza.com/)
# @license     https://www.mageplaza.com/LICENSE.txt

type Query {
    mpGiftCode (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        id: Int! @doc(description: "Specifies the gift code id to search for."),
    ): GiftCodeOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\Get\\GiftCode") @doc(description: "Searches for an item that matches the id.")
    mpGiftCodeList (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        filter: GiftCodeFilterInput! @doc(description: "Identifies which fields to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. The default value is 20."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
    ): GiftCodeListOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GetList\\GiftCode") @doc(description: "Searches for items that match the criteria specified in the search and filter attributes.")
    mpGiftPool (
        id: Int! @doc(description: "Specifies the gift pool id to search for."),
    ): GiftPoolOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\Get\\GiftPool") @doc(description: "Searches for an item that matches the id.")
    mpGiftPoolList (
        filter: GiftPoolFilterInput! @doc(description: "Identifies which fields to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. The default value is 20."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
    ): GiftPoolListOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GetList\\GiftPool") @doc(description: "Searches for items that match the criteria specified in the search and filter attributes.")
    mpGiftTemplate (
        id: Int! @doc(description: "Specifies the gift template id to search for."),
    ): GiftTemplateOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\Get\\GiftTemplate") @doc(description: "Searches for an item that matches the id.")
    mpGiftTemplateList (
        filter: GiftTemplateFilterInput! @doc(description: "Identifies which fields to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. The default value is 20."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
    ): GiftTemplateListOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GetList\\GiftTemplate") @doc(description: "Searches for items that match the criteria specified in the search and filter attributes.")
}

type Mutation {
    mpGiftCodeSave (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        input: GiftCodeInput! @doc(description: "Specifies which fields to change. If 'giftcard_id' is presented, the gift code will be updated, otherwise create new gift code.")
    ): GiftCodeOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\Save\\GiftCode") @doc(description: "Save gift code")
    mpGiftPoolSave (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        input: GiftPoolInput! @doc(description: "Specifies which fields to change. If 'pool_id' is presented, the gift pool will be updated, otherwise create new gift pool.")
    ): GiftPoolOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\Save\\GiftPool") @doc(description: "Save gift pool")
    mpGiftTemplateSave (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        input: GiftTemplateInput! @doc(description: "Specifies which fields to change. If 'template_id' is presented, the gift template will be updated, otherwise create new gift template.")
    ): GiftTemplateOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\Save\\GiftTemplate") @doc(description: "Save gift template")
    mpGiftCodeDelete (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        id: Int! @doc(description: "Specifies the gift code id to search for and delete.")
    ): Boolean @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\Delete\\GiftCode") @doc(description: "Delete gift code")
    mpGiftPoolDelete (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        id: Int! @doc(description: "Specifies the gift pool id to search for and delete.")
    ): Boolean @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\Delete\\GiftPool") @doc(description: "Delete gift pool")
    mpGiftTemplateDelete (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        id: Int! @doc(description: "Specifies the gift template id to search for and delete.")
    ): Boolean @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\Delete\\GiftTemplate") @doc(description: "Delete gift template")
    mpGiftPoolGenerate (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        id: Int! @doc(description: "Specifies the gift template id to search for and generate."),
        pattern: String = "[4AN]-[4A]-[4N]" @doc(description: "Specifies the gift code pattern."),
        qty: Int = 1 @doc(description: "How many gift codes will be generated.")
    ): [String] @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftPoolGenerate") @doc(description: "Generate gift code from gift pool")
    mpGiftCardSetCode (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        cartId: Int! @doc(description: "Specifies the quote id to search for and apply the gift code."),
        code: String! @doc(description: "Specifies what gift code will be applied.")
    ): Boolean @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftCard\\SetGiftCode") @doc(description: "Apply gift card code")
    mpGiftCardRemoveCode (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        cartId: Int! @doc(description: "Specifies the quote id to search for and remove the gift code."),
        code: String! @doc(description: "Specifies what gift code will be removed")
    ): Boolean @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftCard\\RemoveGiftCode") @doc(description: "Remove gift card code")
    mpGiftCardSetCredit (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        cartId: Int! @doc(description: "Specifies the quote id to search for and set the gift credit."),
        amount: String! @doc(description: "Specifies how much gift credit will be applied.")
    ): Boolean @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftCard\\SetGiftCredit") @doc(description: "Apply gift credit amount")
    mpGiftCardRedeem (
        accessToken: String! @doc(description: "Oauth access token that is needed to make requests."),
        customerId: Int! @doc(description: "Specifies the customer id to search for and redeem the gift code."),
        code: String! @doc(description: "Specifies what gift code will be redeemed.")
    ): GiftCardRedeemDetail @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftCard\\Redeem") @doc(description: "Redeem gift card code for customer")
}

input GiftCodeFilterInput @doc(description: "Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.") {
    giftcard_id: FilterTypeInput
    code: FilterTypeInput
    pattern: FilterTypeInput
    init_balance: FilterTypeInput
    balance: FilterTypeInput
    status: FilterTypeInput
    can_redeem: FilterTypeInput
    store_id: FilterTypeInput
    pool_id: FilterTypeInput
    template_id: FilterTypeInput
    image: FilterTypeInput
    template_fields: FilterTypeInput
    customer_ids: FilterTypeInput
    order_item_id: FilterTypeInput
    order_increment_id: FilterTypeInput
    delivery_method: FilterTypeInput
    delivery_address: FilterTypeInput
    is_sent: FilterTypeInput
    delivery_date: FilterTypeInput
    timezone: FilterTypeInput
    extra_content: FilterTypeInput
    expired_at: FilterTypeInput
    created_at: FilterTypeInput
}

input GiftPoolFilterInput @doc(description: "Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.") {
    pool_id: FilterTypeInput
    name: FilterTypeInput
    status: FilterTypeInput
    can_inherit: FilterTypeInput
    pattern: FilterTypeInput
    balance: FilterTypeInput
    can_redeem: FilterTypeInput
    store_id: FilterTypeInput
    template_id: FilterTypeInput
    image: FilterTypeInput
    template_fields: FilterTypeInput
    expired_at: FilterTypeInput
    created_at: FilterTypeInput
}

input GiftTemplateFilterInput @doc(description: "Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.") {
    template_id: FilterTypeInput
    name: FilterTypeInput
    status: FilterTypeInput
    can_upload: FilterTypeInput
    title: FilterTypeInput
    font_family: FilterTypeInput
    background_image: FilterTypeInput
    design: FilterTypeInput
    note: FilterTypeInput
    images: FilterTypeInput
    created_at: FilterTypeInput
}

input GiftCodeInput {
    giftcard_id: Int @doc(description: "Gift card ID that is used to identify the gift card.")
    pattern: String @doc(description: "Gift code pattern.")
    init_balance: Float @doc(description: "Initial balance of the gift card.")
    balance: Float @doc(description: "Current balance of the gift card.")
    status: Int @doc(description: "Is the gift card enable?")
    can_redeem: Int @doc(description: "Is the gift card redeemable?")
    store_id: Int @doc(description: "Specifies which store the gift card is available at.")
    pool_id: Int @doc(description: "Pool id that the gift code belongs to.")
    template_id: Int @doc(description: "Template id that is used for the gift card.")
    image: String @doc(description: "Relative image path.")
    template_fields: GiftCardTemplateFieldsInput @doc(description: "Template fields.")
    delivery_method: String @doc(description: "Delivery methods, values: 1 - Email, 2 - Text Message, 3 - Print At Home, 4 - Post Office.")
    delivery_address: String @doc(description: "Delivery address that includes email or phone number.")
    is_sent: Int @doc(description: "Is gift card sent to recipient?")
    delivery_date: String @doc(description: "The date that the sender wants the gift card to be sent.")
    timezone: String @doc(description: "Timezone for the gift card delivery date.")
    extra_content: String @doc(description: "Extra content.")
    expired_at: String @doc(description: "The date that the gift code is expired.")
}

input GiftPoolInput {
    pool_id: Int @doc(description: "Gift pool ID that is used to identify the gift pool.")
    name: String @doc(description: "Gift pool name.")
    status: Int @doc(description: "Gift card status.")
    can_inherit: Int @doc(description: "Is the gift pool's properties applied for its gift cards?")
    pattern: String @doc(description: "Gift code pattern.")
    balance: Float @doc(description: "Balance of the gift cards that will bed generated.")
    can_redeem: Int @doc(description: "Is the gift card redeemable?")
    store_id: Int @doc(description: "Specifies which store the gift card is available at.")
    template_id: Int @doc(description: "Template id that is used for the gift card.")
    image: String @doc(description: "Relative image path.")
    template_fields: GiftCardTemplateFieldsInput @doc(description: "Template fields.")
    expired_at: String @doc(description: "The date that the gift code is expired.")
}

input GiftTemplateInput {
    template_id: Int @doc(description: "Gift template ID that is used to identify the gift template.")
    name: String @doc(description: "Gift template name.")
    status: Int @doc(description: "Gift template status.")
    can_upload: Int @doc(description: "Can customers upload images when using this gift template?")
    title: String @doc(description: "Gift card title.")
    font_family: String @doc(description: "Font family for the content of the gift template.")
    background_image: String @doc(description: "Background image")
    design: String @doc(description: "CSS style")
    note: String @doc(description: "Note that can be displayed on the gift template.")
    images: String @doc(description: "Array contains relative path, label and position of images belonged to the gift template.")
}

type GiftCodeListOutput {
    total_count: Int @doc(description: "The number of items returned.")
    items: [GiftCodeOutput] @doc(description: "An array of items that match the specified search criteria.")
    page_info: PageInfo @doc(description: "An object that includes the pageSize and currentPage values specified in the query.")
}

type GiftPoolListOutput {
    total_count: Int @doc(description: "The number of items returned.")
    items: [GiftPoolOutput] @doc(description: "An array of items that match the specified search criteria.")
    page_info: PageInfo @doc(description: "An object that includes the pageSize and currentPage values specified in the query.")
}

type GiftTemplateListOutput {
    total_count: Int @doc(description: "The number of items returned.")
    items: [GiftTemplateOutput] @doc(description: "An array of items that match the specified search criteria.")
    page_info: PageInfo @doc(description: "An object that includes the pageSize and currentPage values specified in the query.")
}

type GiftCodeOutput {
    giftcard_id: Int @doc(description: "Gift card ID that is used to identify the gift card.")
    code: String @doc(description: "Gift code")
    pattern: String @doc(description: "Gift code pattern.")
    init_balance: Float @doc(description: "Initial balance of the gift card.")
    balance: Float @doc(description: "Current balance of the gift card.")
    status: Int @doc(description: "Is the gift card enable?")
    can_redeem: String @doc(description: "Is the gift card redeemable?")
    store_id: Int @doc(description: "Specifies which store the gift card is available at.")
    pool_id: Int @doc(description: "Pool id that the gift code belongs to.")
    template_id: Int @doc(description: "Template id that is used for the gift card.")
    image: String @doc(description: "Relative image path.")
    template_fields: GiftCardTemplateFields @doc(description: "Template fields.")
    customer_ids: String @doc(description: "Customers that redeemed the gift card")
    order_item_id: Int @doc(description: "Specifies what gift card product generates the gift card.")
    order_increment_id: Int @doc(description: "Specifies what order contains the gift card product.")
    delivery_method: String @doc(description: "Delivery methods, values: 1 - Email, 2 - Text Message, 3 - Print At Home, 4 - Post Office.")
    delivery_address: String @doc(description: "Delivery address that includes email or phone number.")
    is_sent: Int @doc(description: "Is gift card sent to recipient?")
    delivery_date: String @doc(description: "The date that the sender wants the gift card to be sent.")
    timezone: String @doc(description: "Timezone for the gift card delivery date.")
    extra_content: String @doc(description: "Extra content.")
    expired_at: String @doc(description: "The date that the gift code is expired.")
    created_at: String @doc(description: "Timestamp indicating when the entity was created.")
}

type GiftPoolOutput {
    pool_id: Int @doc(description: "Gift pool ID that is used to identify the gift pool.")
    name: String @doc(description: "Gift pool name.")
    status: Int @doc(description: "Gift card status.")
    can_inherit: Int @doc(description: "Is the gift pool's properties applied for its gift cards?")
    pattern: String @doc(description: "Gift code pattern.")
    balance: Float @doc(description: "Balance of the gift cards that will bed generated.")
    can_redeem: Int @doc(description: "Is the gift card redeemable?")
    store_id: Int @doc(description: "Specifies which store the gift card is available at.")
    template_id: Int @doc(description: "Template id that is used for the gift card.")
    image: String @doc(description: "Relative image path.")
    template_fields: GiftCardTemplateFields @doc(description: "Template fields.")
    expired_at: String @doc(description: "The date that the gift code is expired.")
    created_at: String @doc(description: "Timestamp indicating when the entity was created.")
}

type GiftTemplateOutput {
    template_id: Int @doc(description: "Gift template ID that is used to identify the gift template.")
    name: String @doc(description: "Gift template name.")
    status: Int @doc(description: "Gift template status.")
    can_upload: String @doc(description: "Can customers upload images when using this gift template?")
    title: String @doc(description: "Gift card title.")
    font_family: String @doc(description: "Font family for the content of the gift template.")
    background_image: String @doc(description: "Background image")
    design: String @doc(description: "CSS style")
    note: String @doc(description: "Note that can be displayed on the gift template.")
    images: String @doc(description: "Array contains relative path, label and position of images belonged to the gift template.")
    created_at: String @doc(description: "Timestamp indicating when the entity was created.")
}

input GiftCardTemplateFieldsInput {
    sender: String @doc(description: "Sender who gifts the gift card. This sender's name will be displayed on the gift card.")
    recipient: String @doc(description: "Recipient who receives the gift card. This recipient's name will be displayed on the gift card.")
    message: String @doc(description: "Message that is displayed on the gift card.")
}

type GiftCardTemplateFields {
    sender: String @doc(description: "Sender who gifts the gift card. This sender's name will be displayed on the gift card.")
    recipient: String @doc(description: "Recipient who receives the gift card. This recipient's name will be displayed on the gift card.")
    message: String @doc(description: "Message that is displayed on the gift card.")
}

type GiftCardRedeemDetail {
    customer_balance: String @doc(description: "Customer's balance after redeeming gift code.")
}

type PageInfo {
    pageSize: Int @doc(description: "How many items should show on the page.")
    currentPage: Int @doc(description: "Specifies which page of results to return.")
    hasNextPage: Boolean @doc(description: "Has next page.")
    hasPreviousPage: Boolean @doc(description: "Has previous page.")
    startPage: Int @doc(description: "Start page.")
    endPage: Int @doc(description: "End page.")
}