# Mageplaza
#
# NOTICE OF LICENSE
#
# This source file is subject to the Mageplaza.com license that is
# available through the world-wide-web at this URL:
# https://www.mageplaza.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Mageplaza
# @package     Mageplaza_GiftCardGraphQl
# @copyright   Copyright (c) Mageplaza (https://www.mageplaza.com/)
# @license     https://www.mageplaza.com/LICENSE.txt

type Query {
    mpGiftCardDashboardConfig : MpGiftCardDashboardConfigOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\Dashboard") @doc(description: "Get My Gift Cards Page config data")
    mpGiftCardCheckCode (
        code: String! @doc(description: "Code")
    ): CheckGiftCodeOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\CheckCode") @doc(description: "Check code information")
}

type Mutation {
    saveMpGiftCardDashBoardNotificationSettings(
        giftcard_notification: Boolean @doc(description: "Enable/Disable Gift Card Update Notification")
        credit_notification: Boolean @doc(description: "Update Balance Notification")
    ): Boolean @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\SaveNotificationSettings") @doc(description: "Save Notification Setting")
    setMpGiftCardCodeToCart (
        cartId: String! @doc(description: "Specifies the quote id to search for and apply the gift code."),
        code: String! @doc(description: "Specifies what gift code will be applied.")
    ): Boolean @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftCard\\SetGiftCode") @doc(description: "Apply gift card code")
    removeMpGiftCardCodeFromCart (
        cartId: String! @doc(description: "Specifies the quote id to search for and remove the gift code."),
        code: String! @doc(description: "Specifies what gift code will be removed")
    ): Boolean @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftCard\\RemoveGiftCode") @doc(description: "Remove gift card code")
    setMpGiftCardCreditToCart (
        cartId: String! @doc(description: "Specifies the quote id to search for and set the gift credit."),
        amount: String! @doc(description: "Specifies how much gift credit will be applied.")
    ): Boolean @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftCard\\SetGiftCredit") @doc(description: "Apply gift credit amount")
    redeemMpGiftCard (
        code: String! @doc(description: "Specifies what gift code will be redeemed.")
    ): GiftCardRedeemDetail @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\Redeem") @doc(description: "Redeem gift card code for customer")
    addMpGiftCardList (
        code: String! @doc(description: "Specifies what gift code will be added.")
    ): [MpGiftCardDashboardGiftCard] @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\AddList") @doc(description: "Add gift card code for customer")
    removeMpGiftCardFromList (
        code: String! @doc(description: "Specifies what gift code will be remove.")
    ): [MpGiftCardDashboardGiftCard] @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\RemoveFromList") @doc(description: "Remove gift card code for customer")
    addMpGiftCardProductsToCart(input: AddMpGiftCardProductsToCartInput): AddMpGiftCardProductsToCartOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\AddGiftCardProductsToCart")
    uploadMpGiftCardImage(
        base64_encoded_data: String!
        name: String!
    ): uploadMpGiftCardImageOutput @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\UploadImage")
}

input AddMpGiftCardProductsToCartInput {
    cart_id: String!
    cart_items: [MpGiftCardProductCartItemInput!]!
}

input MpGiftCardProductCartItemInput {
    data: CartItemInput!
    giftcard_options: MpGiftCardOptionInput!
    customizable_options:[CustomizableOptionInput!]
}

input MpGiftCardOptionInput {
    amount: String
    range_amount: Boolean
    delivery: Int
    email: String
    phone_number: String
    from: String
    to: String
    message: String
    delivery_date: String
    timezone: String
    image: String
    template: Int
}

type uploadMpGiftCardImageOutput {
    name: String
    type: String
    error: Int
    size: Int
    file: String
    url: String
}

type Cart {
    mp_giftcard_config: MpGiftCardConfig @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftCardConfig")
}

type MpGiftCardConfig {
    enableGiftCard: Boolean
    enableMultiple: Boolean
    canShowDetail: Boolean
    listGiftCard: [MpGiftCardList]
    giftCardUsed: [MpGiftCardUsed]
    enableGiftCredit: Boolean
    balance: Float
    maxUsed: Float
    creditUsed: Float
    css: [String]
}

type MpGiftCardList {
    code: String
    hidden: String
    balance: String
    status: String
    expired_at: String
}

type MpGiftCardUsed {
    code: String
    amount: Float
    status: String
    expired_at: String
}

type AddMpGiftCardProductsToCartOutput {
    cart: Cart!
}

type MpGiftCardCartItem implements CartItemInterface {
    giftcard_options: [SelectedGiftCardOption!]! @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftCardOption")
}

type SelectedGiftCardOption {
    option_id: String
    item_id: String
    product_id: String
    code: String
    value: String
}

type CheckGiftCodeOutput {
    balance: String
    balance_formatted: String
    status: String
    status_label: String
    expired_at: String
    expired_at_formatted: String
}

type MpGiftCardDashboardConfigOutput {
    balance: String
    baseUrl: String
    code: String
    customerEmail: String
    giftCardLists: [MpGiftCardDashboardGiftCard]
    isEnableCredit: Boolean
    notification: MpGiftCardDashboardConfigNotification
    transactions: [MpGiftCardTransaction]
}

type MpGiftCardDashboardConfigNotification {
    creditEnable: String
    creditNotification: Boolean
    enable: String
    giftcardNotification: Boolean
}

type MpGiftCardDashboardGiftCard {
    balance: String
    balance_formatted: String
    can_redeem: Boolean
    code: String
    conditions_serialized: String
    created_at: String
    customer_ids: String
    delivery_address: String
    delivery_date: String
    delivery_method: String
    expired_at: String
    expired_at_formatted: String
    extra_content: String
    giftcard_id: String
    hidden_code: String
    histories: [MpGiftCardHistory]
    image: String
    init_balance: String
    is_sent: String
    order_increment_id: String
    order_item_id: String
    pool_id: String
    status: Int
    status_label: String
    store_id: String
    template_fields: String
    template_id: String
    timezone: String
}

type MpGiftCardHistory {
    action: String
    action_detail: String
    action_label: String
    amount: String
    amount_formatted: String
    balance: String
    code: String
    created_at: String
    created_at_formatted: String
    extra_content: String
    giftcard_id: String
    history_id: String
    status: String
    status_label: String
    store_id: String
}

type MpGiftCardTransaction {
    action: String
    action_detail: String
    action_label: String
    amount: String
    amount_formatted: String
    balance: String
    created_at: String
    created_at_formatted: String
    credit_id: String
    customer_id: String
    extra_content: String
    transaction_id: String
    website_id: String
}

type GiftCardRedeemDetail {
    customer_balance: String @doc(description: "Customer's balance after redeeming gift code.")
}

type MpGiftCardProduct implements ProductInterface, PhysicalProductInterface, CustomizableProductInterface @doc(description: "MpGiftCardProduct defines basic features of a gift card product and its simple product variants") {
    information: MpGiftCardProductInfo @doc(description: "Gift Card product information") @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftCardProductInformation")
    template: [MpGiftCardProductTemplate] @doc(description: "An array of linked simple product items") @resolver(class: "Mageplaza\\GiftCardGraphQl\\Model\\Resolver\\GiftCardProductTemplate")
}

type MpGiftCardProductInfo {
    amounts: [MpGiftCardAmount] @doc(description: "An array of amount information")
    delivery: [MpGiftCardDelivery] @doc(description: "An array of delivery method")
    currencyRate: Float
    enableDeliveryDate: Boolean
    expire_after: String
    fileUploadUrl: String
    messageMaxChar: Int
    openAmount: MpGiftCardOpenAmount
    priceFormat: MpGiftCardPriceFormat
    productId: String
    timezone: MpGiftCardTimeZone
    uploadTooltip: String
}

type MpGiftCardTimeZone {
    enable: Boolean
    options: [MpGiftCardTimeZoneOption]
}

type MpGiftCardTimeZoneOption {
    value: String
    label: String
}

type MpGiftCardPriceFormat {
    decimalSymbol: String
    groupLength: Int
    groupSymbol: String
    integerRequired: Boolean
    pattern: String
    precision: Int
    requiredPrecision: Int
}

type MpGiftCardOpenAmount {
    min: String
    max: String
    rate: String
}

type MpGiftCardAmount {
    record_id: String @doc(description: "Amount ID")
    price: String @doc(description: "Price")
    amount: String @doc(description: "Amount")
}

type MpGiftCardDelivery {
    key: Int
    label: String
    fields: String
}

type MpGiftCardProductTemplate {
    id: Int
    canUpload: Boolean
    font: String
    name: String
    title: String
    card: String
    design: String
    images: [MpGiftCardProductTemplateImage]
}

type MpGiftCardProductTemplateImage {
    file: String
    src: String
    alt: String
}

type CartPrices {
    gift_card: MpGiftCardDiscounts
    gift_credit: Money
}

type MpGiftCardDiscounts {
    currency: String
    value: Float
    gift_cards: [MpGiftCardDiscountsDetail]
}

type MpGiftCardDiscountsDetail {
    code: String
    value: Float
}
